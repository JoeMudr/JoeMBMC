#include <Arduino.h> 
#include <FlexCAN_T4.h>
#include <config.h>
 
void Reset_Cause(uint32_t resetStatusReg);
void BMSInit();
void mAmpsec_calc();
bool WarnAlarm_Check(byte Type = 0, byte WarnAlarm = WarnAlarm_Dummy);
void Balancing(bool active);
void BMS_Poll();
void BMC_Status_LED();
byte Vehicle_CondCheck(byte tmp_status);
byte ESS_CondCheck(byte tmp_status);
void SOC_charged();
void CAP_recalc();
void can1_start();
void can2_start();
void CAN_read();
void CAN_MC_read(CAN_message_t MSG);
void CAN_TCU_read(CAN_message_t MSG);
void CAN_BMC_Std_send(byte CAN_Nr);
void CAN_BMC_HV_send(byte CAN_Nr, CAN_message_t MSG);
void CAN_Charger_Send(byte CAN_Nr);
void CAN_Debug_IN(byte Can_Nr, CAN_message_t MSG);
void CAN_Debug_OUT();
void CAN_SEN_read(CAN_message_t MSG, int32_t& CurrentAct);
signed long CAN_SEN_LEMCAB(CAN_message_t MSG);
signed long CAN_SEN_VictronLynx(CAN_message_t MSG);
bool CO_NMT(uint32_t CO_Target_ID, uint8_t CO_Target_State);
void CO_SYNC();
void CO_PDO1_send(uint32_t CO_Target_ID);
void CO_PDO2_send(uint32_t CO_Target_ID);
void CO_SDO_send_test(uint32_t CO_Target_ID);
void CO_Send_SDO(uint32_t CO_Target_ID, uint8_t CCS, uint8_t expedited, uint16_t index, uint8_t subindex, uint8_t datasize);
uint32_t CO_Handle(CAN_message_t MSG);
void SOC_update();
void DischargeCurrentLimit();
void ChargeCurrentLimit();
void Currentavg_Calc();
void WDOG_reset();
void Menu();
void ContCon();
void Current_debug();
void SERIALCONSOLEprint(bool Module_Print_ON);
void Input_Debug(); 
void Output_debug();
byte Gauge_update();
void Dash_update();
void BT_update();
void Prechargecon();
int32_t ETA();
uint32_t SEN_AnalogueRead(int32_t tmp_currrentlast);
void Serial_clear();
uint16_t SOH_calc();
void Nextion_send(String var, String val);
int16_t pgnFromCANId(int16_t canId);
void nChargersCalc();
void set_BMC_Status(byte status);
void set_OUT_Mapping(byte OUT,byte Function, byte PWM);
byte get_OUT_Mapping(byte OUT, byte Field);
byte find_OUT_Mapping(byte Function);
void cycle_OUT_Mapping(byte OUT);
void OUT_Mapping_read();
void set_OUTs();
void set_OUT_States(byte Function = 254);
uint32_t CAP_Temp_alteration();
void OUT_print(bool Out_Print_ON);
bool ChargeActive();
uint32_t ConvertToBin(uint32_t Input);
