#include <Arduino.h> 

void Reset_Cause(uint32_t resetStatusReg);
void mAmpsec_calc();
void Alarm_Check();
void BalanceCells_Check();
void Balancing();
void BMS_revive();
byte Vehicle_CondCheck(byte tmp_status);
byte ESS_CondCheck(byte tmp_status);
void can1_start();
void can1_reset();
void SOC_charged();
void CAP_recalc();
bool CO_NMT(uint32_t CO_Target_ID, uint8_t CO_Target_State);
void CO_SYNC();
void CO_Send_PDO1(uint32_t CO_Target_ID);
void CO_Send_PDO2(uint32_t CO_Target_ID);
void CO_Send_SDO_test(uint32_t CO_Target_ID);
void CO_Send_SDO(uint32_t CO_Target_ID, uint8_t CCS, uint8_t expedited, uint16_t index, uint8_t subindex, uint8_t datasize);
uint32_t CO_Handle();
void SOC_update();
void DischargeCurrentLimit();
void ChargeCurrentLimit();
void Currentavg_Calc();
void WDOG_reset();
void MC_CAN_read();
void CAN_BMS_send();
void CAN_in_Debug();
void CAN_out_debug();
void SerialCanRecieve();
void Menu();
void ContCon();
void Current_debug();
void SERIALCONSOLEprint();
void Input_Debug(); 
void Output_debug();
void Gauge_update();
void Dash_update();
void BT_update();
void Prechargecon();
void CAN_chargercomms();
int ETA();
signed long SEN_LEMCAB();
float SEN_CANread();
signed long SEN_VictronLynx();
float SEN_AnalogueRead(float tmp_currrentlast);
void Serial_clear();
int SOH_calc();
void Nextion_send(String var, String val);
int pgnFromCANId(int canId);
void nChargersCalc();
void set_BMS_Status(byte status);
void CAN_handle();
void set_OUT_Mapping(byte OUT,byte Function, byte PWM);
byte get_OUT_Mapping(byte OUT, byte Field);
byte find_OUT_Mapping(byte Function);
void cycle_Out_Mapping(byte OUT);
void OUT_Mapping_read();
void set_OUTs();
float CAP_Temp_alteration();
void OUT_Debug();
